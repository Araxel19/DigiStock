# CircleCI Configuration for DigiStock
version: 2.1

orbs:
  node: circleci/node@5.0.2
  sonarcloud: sonarsource/sonarcloud@3.0.1

jobs:
  # 🧱 Instalar dependencias y compilar todos los workspaces
  install_and_build_all:
    docker:
      - image: cimg/node:18.16
    working_directory: ~/project
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: "Compilar todos los workspaces"
          command: |
            npm run build:backend
            npm run build:business-logic
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend/dist
            - business-logic/dist

  # 🧪 Ejecutar pruebas (si existen)
  run_tests:
    docker:
      - image: cimg/node:18.16
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: "Ejecutar pruebas si existen"
          command: |
            if grep -q "\"test\":" package.json; then
              npm test
            else
              echo "No hay pruebas definidas. Saltando paso..."
            fi

  # 🐳 Construir imágenes Docker y subirlas
  docker_build:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ./
      - run:
          name: "Construir imagen Docker del backend"
          command: |
            docker build -t araxel119/digistock-backend:latest -f backend/Dockerfile .
      - run:
          name: "Construir imagen Docker del frontend"
          command: |
            docker build -t araxel119/digistock-frontend:latest -f frontend/Dockerfile frontend
      - run:
          name: "Autenticarse en Docker Hub y subir imágenes"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push araxel119/digistock-backend:latest
            docker push araxel119/digistock-frontend:latest

  # 🚀 Despliegue automático en Swarm
  deploy_to_swarm:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys:
          fingerprints:
            - "YOUR_SSH_KEY_FINGERPRINT"
      - run:
          name: "Desplegar stack en Swarm"
          command: |
            ssh -o StrictHostKeyChecking=no $SWARM_USER@$SWARM_HOST "
              export JWT_SECRET='$JWT_SECRET';
              export DB_USERNAME='$DB_USERNAME';
              export DB_PASSWORD='$DB_PASSWORD';
              export DB_NAME='$DB_NAME';
              export DB_HOST='$DB_HOST';
              export DB_PORT='$DB_PORT';
              export DB_SSL='$DB_SSL';
              export NODE_ENV='$NODE_ENV';
              export N8N_BASIC_AUTH_USER='$N8N_BASIC_AUTH_USER';
              export N8N_BASIC_AUTH_PASSWORD='$N8N_BASIC_AUTH_PASSWORD';
              docker stack deploy --compose-file /home/$SWARM_USER/digistock/docker-stack.yml --with-registry-auth digistock
            "

  # 🔍 Análisis SonarCloud con Orb oficial
  sonarcloud_analysis:
    docker:
      - image: cimg/node:18.16
    working_directory: ~/project
    steps:
      - checkout
      - sonarcloud/scan

workflows:
  version: 2
  build_pipeline:
    jobs:
      - install_and_build_all
      - run_tests:
          requires:
            - install_and_build_all
      - docker_build:
          requires:
            - install_and_build_all
      - sonarcloud_analysis:
          requires:
            - install_and_build_all
      - deploy_to_swarm:
          requires:
            - docker_build
