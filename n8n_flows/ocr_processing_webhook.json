{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ocr-process",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "5af03739-f741-4bd2-8b0b-03f98ca5bcb9",
      "name": "Webhook OCR",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1296,
        192
      ],
      "webhookId": "ocr-process"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.imageBase64 }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "adea3e00-dfbd-4a7e-bec7-c5883ca4d23b",
      "name": "Check Base64",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1072,
        192
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": false, \"message\": \"imageBase64 is required\", \"data\": null}",
        "options": {}
      },
      "id": "8eac22c6-cd2d-4060-b255-904cfd28e6fc",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -864,
        304
      ]
    },
    {
      "parameters": {
        "documentType": "image_url",
        "options": {}
      },
      "type": "n8n-nodes-base.mistralAi",
      "typeVersion": 1,
      "position": [
        -640,
        96
      ],
      "id": "a5786dad-aab3-4e33-996f-0e7ef717b1a5",
      "name": "Extract text",
      "credentials": {
        "mistralCloudApi": {
          "id": "sZLsAOMbb9pzDHDd",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.imageBase64",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -864,
        96
      ],
      "id": "33554340-7919-43e4-a201-93bd0f612abe",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "// Lee el texto del OCR del nodo anterior\nconst text = $json.pages?.[0]?.markdown;\nif (!text) {\n  throw new Error(\"No se encontró texto en la entrada del OCR.\");\n}\n\n// Obtiene el planillaId que el backend envió al webhook\nconst planillaId = $('Webhook OCR').first().json.body.planillaId;\n\n// Separa las líneas del texto\nconst lines = text.split(\"\\n\").filter(l => l.trim() !== \"\");\n\n// Busca la línea del encabezado usando las palabras correctas y en minúsculas\nconst headerIndex = lines.findIndex(l => \n  l.toLowerCase().includes(\"detected code\") && l.toLowerCase().includes(\"detected name\")\n);\n\n// --- ¡ESTA ES LA CORRECCIÓN CLAVE! ---\n// Si no se encuentra el encabezado, lanza un error claro en lugar de fallar silenciosamente.\nif (headerIndex === -1) {\n  throw new Error(\"No se pudo encontrar la fila de encabezado ('Detected Code', 'Detected Name') en el texto del OCR. El texto extraído fue:\\n\\n\" + text);\n}\n\n// Extrae los encabezados de la línea encontrada\nconst headers = lines[headerIndex].split(\"|\").map(h => h.trim()).filter(h => h);\n\n// Procesa las filas de datos que están después del encabezado\nconst rows = lines.slice(headerIndex + 1).map(line => {\n  const cols = line.split(\"|\").map(c => c.trim()).filter(c => c);\n  if (cols.length < headers.length) return null; // descarta filas incompletas\n\n  let obj = {};\n  headers.forEach((h, i) => {\n    obj[h] = cols[i] || \"\";\n  });\n  return obj;\n}).filter(r => r);\n\n// Devuelve cada producto como un item separado, \"etiquetado\" con el planillaId\nreturn rows.map(producto => ({\n  json: {\n    producto: producto,\n    planillaId: planillaId\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -416,
        96
      ],
      "id": "1ac0c18f-96bf-4ebb-88b7-37d5d7605ae0",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Si no llegan items, no hagas nada.\nif (items.length === 0) {\n  return [];\n}\n\n// 1. Agrupar todos los objetos \"producto\" en un solo array\nconst inventarioCompleto = items.map(item => item.json.producto);\n\n// 2. Tomar el planillaId del PRIMER item que llega (todos tienen el mismo)\nconst planillaId = items[0].json.planillaId;\n\n// 3. Crear el objeto final que el backend espera\nconst payloadFinal = {\n  planillaId: planillaId,\n  inventario: inventarioCompleto\n};\n\n// 4. Devolver el payload final en la estructura correcta\nreturn [{\n  json: payloadFinal\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        96
      ],
      "id": "35facbdf-d5d6-4331-9a56-08d048d01998",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://backend:3000/api/v1/inventory/notify-progress",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "=application/json",
        "body": "={{$json.bodyFinal}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        224
      ],
      "id": "fcb96d62-6a87-4a21-abe4-b42a87dcf006",
      "name": "Notificar al BackEnd"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://backend:3000/api/v1/ocr/resultados",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        0
      ],
      "id": "52585323-61be-4799-abe1-320cfe93e508",
      "name": "Enviar los Resultados",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json;\n\nconst payload = {\n  planillaId: data.planillaId,\n  status: \"validacion_pendiente\",\n  message: \"OCR completado, listo para validación.\"\n};\n\n// Guarda el TEXTO JSON en una nueva propiedad\n$input.item.json.bodyFinal = JSON.stringify(payload);\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -16,
        208
      ],
      "id": "4245a03d-91f6-409b-9f11-bc8c85acffd9",
      "name": "Code in JavaScript2"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook OCR": {
      "main": [
        [
          {
            "node": "Check Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Base64": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract text": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Extract text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Enviar los Resultados",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar los Resultados": {
      "main": [
        []
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Notificar al BackEnd",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e16a6c8f-1ff4-41f4-ad45-c09bcf3dacb7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4060635e2c10e1925268e83e96cf57e13801bf6b8de0d56bb97b48dd1f9ea3ef"
  },
  "id": "MSvbyFimm7aleJ0Z",
  "tags": []
}