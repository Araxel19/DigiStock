{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ocr-process",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "cbfab2d3-305d-485c-b613-626fd970310e",
      "name": "Webhook OCR",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1504,
        192
      ],
      "webhookId": "ocr-process"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.imageBase64 }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "ee9e853d-8170-48c9-9e92-b6bb60d4c943",
      "name": "Check Base64",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1280,
        192
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": false, \"message\": \"imageBase64 is required\", \"data\": null}",
        "options": {}
      },
      "id": "32c495c5-61d6-4b3c-a785-38c29e33df3c",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        -1072,
        304
      ]
    },
    {
      "parameters": {
        "documentType": "image_url",
        "options": {}
      },
      "type": "n8n-nodes-base.mistralAi",
      "typeVersion": 1,
      "position": [
        -848,
        96
      ],
      "id": "ff606caf-b59b-4879-a8fc-8cae6d880aec",
      "name": "Extract text",
      "credentials": {
        "mistralCloudApi": {
          "id": "UKGuIOiOPvTfXgYB",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.imageBase64",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1072,
        96
      ],
      "id": "3e99bfce-9b65-4641-912e-f11de8f001ad",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "// Lee el texto del OCR del nodo anterior\nconst text = $json.pages?.[0]?.markdown;\nif (!text) {\n  throw new Error(\"No se encontró texto en la entrada del OCR.\");\n}\n\n// Obtiene el planillaId que el backend envió al webhook\nconst planillaId = $('Webhook OCR').first().json.body.planillaId;\n\n// Separa las líneas del texto (elimina vacías)\nconst lines = text.split(\"\\n\").filter(l => l.trim() !== \"\");\n\n// Busca la línea del encabezado con las palabras clave de la planilla\nconst headerIndex = lines.findIndex(l =>\n  l.toLowerCase().includes(\"código\") &&\n  l.toLowerCase().includes(\"nombre\") &&\n  l.toLowerCase().includes(\"precio\")\n);\n\n// Si no se encuentra el encabezado, lanza un error descriptivo\nif (headerIndex === -1) {\n  throw new Error(\n    \"No se pudo encontrar la fila de encabezado ('Código', 'Nombre del producto', etc.) en el texto del OCR. Texto extraído:\\n\\n\" + text\n  );\n}\n\n// Extrae los encabezados dividiendo por |\nconst headers = lines[headerIndex]\n  .split(\"|\")\n  .map(h => h.trim().toLowerCase())\n  .filter(h => h);\n\n// Procesa las filas de datos que están después del encabezado\nconst rows = lines.slice(headerIndex + 1).map(line => {\n  const cols = line.split(\"|\").map(c => c.trim()).filter(c => c);\n  if (cols.length < headers.length) return null; // descarta filas incompletas\n\n  let obj = {};\n  headers.forEach((h, i) => {\n    // Limpia valores y reemplaza los \"---\" por vacío\n    let value = cols[i] || \"\";\n    if (value === \"---\") value = \"\";\n    obj[h] = value;\n  });\n\n  return obj;\n}).filter(r => r);\n\n// Filtra filas que no sean datos (por ejemplo SUBTOTAL o TOTAL)\nconst productos = rows.filter(r =>\n  !r[\"código\"]?.toLowerCase().includes(\"subtotal\") &&\n  !r[\"código\"]?.toLowerCase().includes(\"total\") &&\n  !r[\"código\"]?.toLowerCase().includes(\"iva\")\n);\n\n// Devuelve cada producto como un item separado con su planillaId\nreturn productos.map(producto => ({\n  json: {\n    producto,\n    planillaId\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -624,
        96
      ],
      "id": "c088f9e4-7b77-4103-96f3-d54975e4f4ce",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Si no llegan items, no hagas nada.\nif (items.length === 0) {\n  return [];\n}\n\n// 1. Agrupar todos los objetos \"producto\" en un solo array\nconst inventarioCompleto = items.map(item => item.json.producto);\n\n// 2. Tomar el planillaId del PRIMER item que llega (todos tienen el mismo)\nconst planillaId = items[0].json.planillaId;\n\n// 3. Crear el objeto final que el backend espera\nconst payloadFinal = {\n  planillaId: planillaId,\n  inventario: inventarioCompleto\n};\n\n// 4. Devolver el payload final en la estructura correcta\nreturn [{\n  json: payloadFinal\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -416,
        96
      ],
      "id": "2b386024-8d9c-4a42-8777-7e4e2c98c97a",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://backend:3000/api/v1/inventory/notify-progress",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "=application/json",
        "body": "={{$json.bodyFinal}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        224
      ],
      "id": "8ceaedcb-89ab-47e6-8b18-e1e7bb0d2999",
      "name": "Notificar al BackEnd"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://backend:3000/api/v1/ocr/resultados",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        0
      ],
      "id": "53d3247b-a95a-4cd5-8977-32b4436d0bb9",
      "name": "Enviar los Resultados",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json;\n\nconst payload = {\n  planillaId: data.planillaId,\n  status: \"validacion_pendiente\",\n  message: \"OCR completado, listo para validación.\"\n};\n\n// Guarda el TEXTO JSON en una nueva propiedad\n$input.item.json.bodyFinal = JSON.stringify(payload);\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        208
      ],
      "id": "1dc3f31f-9fbc-48d8-b76f-e6c7b485cf3b",
      "name": "Code in JavaScript2"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook OCR": {
      "main": [
        [
          {
            "node": "Check Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Base64": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract text": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Extract text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Enviar los Resultados",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Notificar al BackEnd",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a6e19ff0-92a5-4d8b-b3fb-00aab0978c71",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cc514147faf9e4a66832cac2fe1d1c20199ce0757cd22757041444a3876b1c45"
  },
  "id": "fj46VtbSUYqCMrJQ",
  "tags": []
}